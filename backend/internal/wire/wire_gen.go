// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/google/wire"
	"social-app/internal/config"
	"social-app/internal/connector"
	"social-app/internal/domains/auth"
	"social-app/internal/domains/chat"
	"social-app/internal/domains/comment"
	"social-app/internal/domains/like"
	"social-app/internal/domains/llm"
	"social-app/internal/domains/media"
	"social-app/internal/domains/notification"
	"social-app/internal/domains/post"
	"social-app/internal/domains/profile"
	"social-app/internal/routes"
	"social-app/pkg/notifier"
	"social-app/pkg/server"
	"social-app/pkg/ws"
)

// Injectors from wire.go:

func InitServer(ctx context.Context) (server.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return server.Server{}, err
	}
	db := configConfig.DB
	dbConn, err := connector.NewDBConn(db)
	if err != nil {
		return server.Server{}, err
	}
	repository := post.NewRepository(dbConn)
	mediaRepository := media.NewRepository(dbConn)
	useCase := media.NewUseCase(mediaRepository)
	redis := configConfig.Redis
	redisConnector := connector.NewRedisConnector(redis)
	wsConnector := ws.NewConnector(redisConnector)
	broadcaster := ws.NewBroadcaster(wsConnector)
	postUseCase := post.NewUseCase(repository, useCase, broadcaster)
	handler := post.NewHandler(postUseCase)
	commentRepository := comment.NewRepository(dbConn)
	commentUseCase := comment.NewUseCase(commentRepository, broadcaster)
	commentHandler := comment.NewHandler(commentUseCase)
	profileRepository := profile.NewRepository(dbConn)
	sms := configConfig.SMS
	notifierSMS := notifier.NewSMS(sms)
	mailtrap := configConfig.Mailtrap
	mailTrap := notifier.NewMailTrap(mailtrap)
	profileUseCase := profile.NewUseCase(profileRepository, notifierSMS, mailTrap)
	profileHandler := profile.NewHandler(profileUseCase, useCase)
	chatRepository := chat.NewRepository(dbConn)
	chatUseCase := chat.NewUseCase(chatRepository)
	notificationRepository := notification.NewRepository(dbConn)
	notificationUseCase := notification.NewUseCase(notificationRepository, wsConnector)
	chatHandler := chat.NewHandler(chatUseCase, notificationUseCase)
	likeRepository := like.NewRepository(dbConn)
	likeUseCase := like.NewUseCase(likeRepository)
	likeHandler := like.NewHandler(likeUseCase)
	notificationHandler := notification.NewHandler(notificationUseCase)
	authRepository := auth.NewRepository(dbConn)
	configAuth := configConfig.Auth
	authUseCase := auth.NewUseCase(authRepository, configAuth, wsConnector, notifierSMS, mailTrap)
	authHandler := auth.NewHandler(authUseCase)
	mediaHandler := media.NewHandler(useCase)
	wsHandler := ws.NewHandler(wsConnector)
	configLLM := configConfig.LLM
	service := llm.NewService(configLLM)
	llmUseCase := llm.NewUseCase(service)
	llmHandler := llm.NewHandler(llmUseCase)
	router := routes.NewRouter(handler, commentHandler, profileHandler, chatHandler, likeHandler, notificationHandler, authHandler, mediaHandler, configAuth, wsHandler, llmHandler)
	serverServer := server.NewServer(ctx, router, broadcaster, redisConnector)
	return serverServer, nil
}

// wire.go:

var (
	CommonWiring = wire.NewSet(config.NewConfig, wire.FieldsOf(
		new(*config.Config),
		"DB",
		"Auth",
		"Redis",
		"SMS",
		"Mailtrap",
		"LLM",
	), connector.NewDBConn,
	)
	NotifierWiring   = wire.NewSet(notifier.NewSMS, notifier.NewMailTrap, wire.Bind(new(notifier.Mailerx), new(*notifier.MailTrap)), wire.Bind(new(notifier.SMSNotifier), new(*notifier.SMS)))
	WSWiring         = wire.NewSet(connector.NewRedisConnector, ws.NewConnector)
	RepositoryWiring = wire.NewSet(auth.NewRepository, chat.NewRepository, comment.NewRepository, post.NewRepository, like.NewRepository, media.NewRepository, notification.NewRepository, profile.NewRepository)
	ServiceWiring    = wire.NewSet(llm.NewService)
	UseCaseWiring    = wire.NewSet(
		CommonWiring,
		RepositoryWiring,
		ServiceWiring,
		NotifierWiring,
		WSWiring, auth.NewUseCase, chat.NewUseCase, comment.NewUseCase, post.NewUseCase, like.NewUseCase, media.NewUseCase, notification.NewUseCase, profile.NewUseCase, llm.NewUseCase,
	)
	HandlerWiring = wire.NewSet(
		UseCaseWiring, auth.NewHandler, chat.NewHandler, comment.NewHandler, post.NewHandler, like.NewHandler, media.NewHandler, notification.NewHandler, profile.NewHandler, ws.NewBroadcaster, ws.NewHandler, llm.NewHandler,
	)
)
