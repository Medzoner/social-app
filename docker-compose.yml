version: '3.8'

services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-socialdb}
      POSTGRES_USER: ${POSTGRES_USER:-socialuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-socialuser}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Base de données
      DB_DSN: postgres://${POSTGRES_USER:-socialuser}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-socialdb}?sslmode=disable
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXP:-15m}
      REFRESH_EXP: ${REFRESH_EXP:-24h}
      
      # OAuth Google
      SSO_GOOGLE_CLIENT_ID: ${SSO_GOOGLE_CLIENT_ID}
      SSO_GOOGLE_CLIENT_SECRET: ${SSO_GOOGLE_CLIENT_SECRET}
      SSO_GOOGLE_REDIRECT_URL: ${SSO_GOOGLE_REDIRECT_URL:-http://localhost:3222/oauth/google/callback}
      
      # Email Configuration
      MAILER_HOST: ${MAILER_HOST:-smtp.gmail.com}
      MAILER_AUTH_USER: ${MAILER_AUTH_USER}
      MAILER_AUTH_PASS: ${MAILER_AUTH_PASS}
      MAILER_FROM: ${MAILER_FROM:-noreply@socialapp.com}
      
      # SMS Configuration
      SMS_ACCOUNT_ID: ${SMS_ACCOUNT_ID}
      SMS_AUTH_TOKEN: ${SMS_AUTH_TOKEN}
      SMS_FROM: ${SMS_FROM:-+15005550006}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_POOL_SIZE: 10
      REDIS_MIN_IDLE: 5
      
      # LLM Configuration
      LLM_URL: ${LLM_URL:-http://medzoner-srv.lan:11434/api}
      
      # Application Configuration
      GIN_MODE: ${GIN_MODE:-release}
      DEBUG: ${DEBUG:-false}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      VITE_APP_NAME: ${VITE_APP_NAME:-Social App}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped

  # Grafana pour les métriques
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
